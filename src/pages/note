import { Center, Heading } from "@chakra-ui/react";
import { data } from "../utils/data";

export const RecipeListPage = () => {
  // You can play around with the console log, but ultimately remove it once you are done
  console.log(data.hits[0].recipe.label);

  return (
    <Center h="100vh" flexDir="column">
      <Heading>Your Recipe App</Heading>
    </Center>
  );
};

///////////////////

import React from "react";
import { data } from "../utils/data";

function RecipeListPage() {
  return (
    <div>
      <h1>Recipe List</h1>
      <ul>
        {data.hits.map((hit, index) => {
          const recipe = hit.recipe;
          return (
            <li key={index}>
              <h2>{recipe.label}</h2>
              <img src={recipe.image} alt={recipe.label} />
              {recipe.dietLabels.length > 0 && (
                <p>Diet Label: {recipe.dietLabels.join(", ")}</p>
              )}
              {recipe.cautions.length > 0 && (
                <p>Cautions: {recipe.cautions.join(", ")}</p>
              )}
              <p>Meal Type: {recipe.mealType.join(", ")}</p>
              <p>Dish Type: {recipe.dishType.join(", ")}</p>
              <p>Health Labels: {recipe.healthLabels.join(", ")}</p>
            </li>
          );
        })}
      </ul>
    </div>
  );
}

export default RecipeListPage;

/////////
import React from "react";
import { data } from "../utils/data";
import RecipeCard from "../components/ui/RecipeCard";

function RecipeListPage() {
  return (
    <div>
      <h1>Recipe List</h1>
      <div className="recipe-list">
        {recipeData.hits.map((hit, index) => (
          <RecipeCard key={index} recipe={hit.recipe} />
        ))}
      </div>
    </div>
  );
}

export default RecipeListPage;
//////////
// recipelistpage

import React from "react";
import { data } from "../utils/data";
import { RecipeCard } from "../components/RecipeCard";

export function RecipeListPage() {
  return (
    <div>
      <h1>Recipe List</h1>
      <ul>
        {data.hits.map((hit, index) => (
          <RecipeCard key={index} recipe={hit.recipe} />
        ))}
      </ul>
    </div>
  );
}

////////////// Searchbar.jsx
import { useState } from "react";
import { data } from "../utils/data";
import { TextInput } from "./ui/TextInput";
import { RecipeListPage } from "../pages/RecipeListPage";

export const SearchBar = ({ handleSearch }) => {
  const [searchField, setSearchField] = useState("");

  const matchedRecipes = data.hits.filter((recipes) => {
    return recipes.recipe.label
      .toLowerCase()
      .includes(searchField.toLocaleLowerCase());
  });
  const handleChange = (onSearch) => {
    setSearchField(handleSearch.target.value);
  };

  return (
    <>
      <label>Search Recipes</label>
      <TextInput changeFn={handleChange} />
    </>
  );
};
//////
import { Center, Heading, SimpleGrid } from "@chakra-ui/react";
import React, { useState } from "react";
import { data } from "../utils/data";
import { RecipeCard } from "../components/RecipeCard";
import { SearchBar } from "../components/SearchBar";

export function RecipeListPage() {
  const [filteredRecipes, setFilteredRecipes] = useState(data.hits);

  const handleSearch = (searchTerm) => {
    const filteredRecipes = data.hits.filter((hit) => {
      const recipe = hit.recipe;
      const { label, healthLabels } = recipe;

      return (
        label.toLowerCase().includes(searchTerm.toLowerCase()) ||
        healthLabels.some((label) =>
          label.toLowerCase().includes(searchTerm.toLowerCase())
        )
      );
    });
    setFilteredRecipes(filtered);
  };
  const handleBackClick = () => {
    setSelectedRecipe(null);
  };
  return (
    <div>
      <h1>Recipe List</h1>
      <Center bgColor={"blackAlpha.300"} flexDirection="column" gap={8}>
        <Heading>Your Recipe App</Heading>

        <SearchBar onSearch={handleSearch} />
        <SimpleGrid columns={4} spacing={4}>
          {data.hits.map((hit, index) => (
            <RecipeCard key={index} recipe={hit.recipe} />
          ))}
        </SimpleGrid>
      </Center>
    </div>
  );
}
/////
import { useState } from "react";
import { TextInput } from "./ui/TextInput";

export const SearchBar = ({ onSearch }) => {
  const [searchField, setSearchField] = useState("");

  const handleChange = (event) => {
    const searchTerm = event.target.value;
    setSearchField(searchTerm);
    onSearch(searchTerm);
  };

  return (
    <>
      <label>Search Recipes</label>
      <TextInput changeFn={handleChange} />
    </>
  );
};
///////////Recipe list Page
import { Center, Heading, SimpleGrid } from "@chakra-ui/react";
import React, { useState } from "react";
import { data } from "../utils/data";
import { RecipeCard } from "../components/RecipeCard";
import { SearchBar } from "../components/SearchBar";
import { RecipePage } from "./RecipePage";

export function RecipeListPage() {
  const [filteredRecipes, setFilteredRecipes] = useState(data.hits);
  const [selectedRecipe, setSelectedRecipe] = useState(null);

  const handleSearch = (searchTerm) => {
    const filteredRecipes = data.hits.filter((hit) => {
      const recipe = hit.recipe;
      const { label, healthLabels } = recipe;

      return (
        label.toLowerCase().includes(searchTerm.toLowerCase()) ||
        healthLabels.some((label) =>
          label.toLowerCase().includes(searchTerm.toLowerCase())
        )
      );
    });
    setFilteredRecipes(filteredRecipes);
  };

  return (
    <div>
      <Center bgColor={"blackAlpha.300"} flexDirection="column" gap={8}>
        <Heading>Your Recipe App</Heading>

        {selectedRecipe === null && <SearchBar onSearch={handleSearch} />}

        {selectedRecipe ? (
          <RecipePage
            recipe={selectedRecipe}
            onBack={() => setSelectedRecipe(null)}
          />
        ) : (
          <SimpleGrid columns={4} spacing={4}>
            {filteredRecipes.map((hit, index) => (
              <RecipeCard
                key={index}
                recipe={hit.recipe}
                onClick={() => setSelectedRecipe(hit.recipe)}
              />
            ))}
          </SimpleGrid>
        )}
      </Center>
    </div>
  );
}
///////

/////RecipePage
import React from "react";
import { IconButton, Box } from "@chakra-ui/react";
import { ChevronLeftIcon } from "@chakra-ui/icons";

export function RecipePage({ recipe, onBack }) {
  return (
    <div>
      <IconButton
        aria-label="Back to Recipe List"
        icon={<ChevronLeftIcon />}
        onClick={onBack}
        variant="outline"
      />

      <h1>{recipe.label}</h1>
      <img src={recipe.image} alt={recipe.label} />
      <p>Yield: {recipe.yield}</p>
      <h2>Health Labels:</h2>
      <div className="health-labels">
        {recipe.healthLabels.map((label, index) => (
          <Box
            key={index}
            bg="purple.400"
            color="white"
            borderRadius="md"
            display="inline-block"
            padding="5px 10px"
            marginRight="5px"
          >
            {label}
          </Box>
        ))}
      </div>
      <h2> Diet Labels:</h2>
      <div className="diet-labels">
        {recipe.dietLabels.map((label, index) => (
          <Box
            key={index}
            bg="green.400"
            color="white"
            borderRadius="md"
            display="inline-block"
            padding="5px 10px"
            marginRight="5px"
          >
            {label}
          </Box>
        ))}
      </div>
      <p>Cautions: {recipe.cautions.join(", ")}</p>
      <h2>Ingredients:</h2>
      <ul>
        {recipe.ingredientLines.map((ingredient, index) => (
          <li key={index}>{ingredient}</li>
        ))}
      </ul>
      <p>Total Cooking Time: {recipe.totalTime} minutes</p>
      <h2>Total Nutrients:</h2>
      <ul>
        <li>Energy (kcal): {recipe.totalNutrients.ENERC_KCAL?.quantity}</li>
        <li>Fat (g): {recipe.totalNutrients.FAT?.quantity}</li>
        <li>Protein (g): {recipe.totalNutrients.PROCNT?.quantity}</li>
        <li>Carbs (g): {recipe.totalNutrients.CHOCDF?.quantity}</li>
        <li>Cholesterol (mg): {recipe.totalNutrients.CHOLE?.quantity}</li>
        <li>Sodium (mg): {recipe.totalNutrients.NA?.quantity}</li>
      </ul>
    </div>
  );
}
////
